Ruby 范围

范围无处不在, a -> z, 0 -9, 等等, Ruby 支持范围, 并允许我们以不同的方式使用范围
- 作为序列的范围
- 作为条件的范围
- 作为间隔的范围

# 作为序列的范围
范围第一个也是最常见的用途是表达序列, 序列有一个起点, 一个终点和一个在序列产生连续值的方式

Ruby 使用 '..' 和 '...' 范围运算符创建这些序列
1..5 # 1 2 3 4 5
1...5 # 1 2 3 4
'a'..'d' # a b c d

可以使用 to_a 方法把范围转换成列表

range1 = (1..10).to_a  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
range2 = ('bar'..'bat').to_a # ["bar", "bas", "bat"]

范围实现了让您便利他们的方法, 您可以通过多种方式检查他们的内容

digist = 0..9
digist.include?(5)
digist.min
digist.max
digist.reject {|i| i < 5 }

# 作为条件的范围
范围也可以作为条件代表式. 

while gets
  print if /start/../end/
end

score = 70
result = case score

when 0..40
  '糟糕的分数'
when 41..60
  '快及格了'
when 61..70
  '及格'
when 71..100
  '良好分数'
else
  '错误的分数'
end


# 作为间隔的范围
范围的最后一个作用是间隔检测, 检测指定是否在指定的范围内, 需要使用 === 相等运算符来完成计算
if (1..10) === 5
  puts "5 在(1..10)"
end

