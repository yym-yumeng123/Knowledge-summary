# Ruby 运算符


a = 10, b = 20


+ 相加
- 相减
* 相乘
/ 相除
% 求模, 返回余数
** 指数: a**b 10的20次方



# Ruby 比较运算符



== 两个操作符是否相等, 相等条件为真 a == b fasle
!= 不相等条件为真 a != b true
> 左边 大于 右边, 是条件为真 a > b true
< 左边 小于 右边 是则条件为真 a < b
>=
<=

<=> 联合比较运算符, 第一个操作符 = 第二个操作符 return 0; 第一个 > 第二个 return 1; 第一个 < 第二个 return -1

=== 用于测试 case 语句的 when 子句内的相等  (1...10) === 5 true

.eql?  接收器和参数 具有相同的类和相同的值 返回 true, 1 == 1.0 true; 1.eql?(1.0) false

equal?  接收器和参数具有相同对象 id, 返回 true,  如果 aObj 是 bObj 的副本, 那么 aObj == bObj true; a.equal?bObj false; a.equal?aObj true


# Ruby 赋值运算符

= 把右操作符的值赋值给左操作符 c = a + b => a + b 赋值给 c

+= 加且赋值运算符, 把右操作符 + 左操作符 赋值给 左操作符  c += a => c = c + a
-=
*=
/=
%=
**=




# Ruby 并行赋值

a = 10
b = 20
c = 30

a, b, c = 10, 20, 30

# 并行赋值在交换两个变量值时也很有用
a, b = b, c

# Ruby 逻辑运算符

and 逻辑与运算符, 两个操作数都为真, 则条件为真  (a and b) 为真
or 逻辑或运算符, 两个操作符有任意一个非零, 则为真 (a or b) 为真
&& 逻辑与运算符 两个操作数都非零, 则条件为真 (a && b) 为真
|| 逻辑或操作符 两个操作数有任意一个非零, 则条件为真 (a || b) 真
! 逻辑非运算符 逆转操作符的逻辑状态 !(a && b) 假
not 逻辑非运算符 逆转操作数的逻辑状态 not(a && b) 假

# Ruby 三元运算符

?: 条件表达式 条件为真 ? X : Y

# Ruby 范围运算符
在 Ruby 中,  序列范围用于创建一系列连续的值 - 包含起始值, 结束值 和 它们之间的值
在 Ruby 中, 这些序列使用 .. 和 ... 范围运算符创建

.. 创建一个从开始到结束的范围 1..10 => 1 到 10
... 开始到结束(不包含结束点) 1...10 =>  1 到 9

# Ruby defined? 运算符

defined? 是一个特殊的运算符, 以方法调用的形式判断来判断传递的表达式是否已定义. 它返回表达式的描述字符串, 如果未定义, 返回 nil

defined? variable # 如果已经初始化 true

foo = 42
defined? foo # => "local-variable"
defined? $_  # => "global-variable"
defined? bar    # => nil（未定义）
defined? method_call # 如果方法已经定义，则为 True
defined? puts        # => "method"
defined? puts(bar)   # => nil（在这里 bar 未定义）

# Ruby . 运算符 双冒号运算符 ::

你可以在方法名称钱加上类或模块名称和 '.' 来调用类或模块中的方法
你可以使用类或模块名程和 两个冒号 :: 来引用类或模块 中的 常量
:: 是一元运算符, 允许在类或模块内定义常量, 实例方法和类方法, 可以从类或模块外的任何地方进行访问

请记住: Ruby中, 类和方法也可以被当做常量
你只需要在 表达式的常量名前加上 :: 前缀, 即可返回适当的类或模块对象

如果 :: 前的表达式为类或模块名称, 返回该类或模块内对应的常量值, 如果 :: 前没有前缀表达式, 则返回主 Object 对应的常量值

MR_COUNT = 0 # 定义在主 Object 类上的常量
module Foo
  MR_COUNT = 0
  ::MR_COUNT = 1 # 设置全局计数为 1
  MR_COUNT = 2 # 设置局部计数为 2
end

puts MR_COUNT # 这是全局常量
puts Foo::MR_COUNT # 这是 "Foo" 的局部常量
